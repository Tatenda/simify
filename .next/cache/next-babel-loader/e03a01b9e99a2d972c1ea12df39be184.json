{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { BehaviorSubject } from 'rxjs';\nimport { CRUDService } from './CRUD.service';\nvar userSubject = new BehaviorSubject(null);\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar API_URL = publicRuntimeConfig.API_URL;\nvar api = \"\".concat(API_URL, \"/accounts\");\nexport var accountService = {\n  logout: logout,\n  login: login,\n  refreshToken: refreshToken,\n  verifyEmail: verifyEmail,\n  forgotPassword: forgotPassword,\n  validateResetToken: validateResetToken,\n  resetPassword: resetPassword,\n  getProfile: getProfile,\n  // getAll,\n  // getById,\n  // create,\n  update: update,\n  saveProfile: saveProfile,\n\n  // delete: _delete,\n  get api() {\n    return \"\".concat(API_URL, \"/accounts\");\n  },\n\n  user: userSubject.asObservable(),\n\n  get userValue() {\n    return userSubject.value;\n  }\n\n};\n\nfunction login(_x, _x2) {\n  return _login.apply(this, arguments);\n}\n\nfunction _login() {\n  _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, password) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", CRUDService.post(\"\".concat(api, \"/authenticate\"), {\n              email: email,\n              password: password\n            }).then(function (user) {\n              userSubject.next(user.data);\n              startRefreshTokenTimer();\n              return user;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _login.apply(this, arguments);\n}\n\nfunction logout(_x3) {\n  return _logout.apply(this, arguments);\n}\n\nfunction _logout() {\n  _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(router) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return CRUDService.post(\"\".concat(api, \"/revoke-token\"), {});\n\n          case 2:\n            stopRefreshTokenTimer();\n            userSubject.next(null);\n            router.push('/account/login');\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _logout.apply(this, arguments);\n}\n\nfunction refreshToken() {\n  return _refreshToken.apply(this, arguments);\n}\n\nfunction _refreshToken() {\n  _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", CRUDService.post(\"\".concat(api, \"/refresh-token\"), {}).then(function (user) {\n              userSubject.next(user.data);\n              startRefreshTokenTimer();\n              return user;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _refreshToken.apply(this, arguments);\n}\n\nvar refreshTokenTimeout;\n\nfunction startRefreshTokenTimer() {\n  var jwtToken = JSON.parse(atob(userSubject.value.jwtToken.split('.')[1]));\n  var expires = new Date(jwtToken.exp * 1000);\n  var timeout = expires.getTime() - Date.now() - 60 * 1000;\n  refreshTokenTimeout = setTimeout(refreshToken, timeout);\n}\n\nfunction stopRefreshTokenTimer() {\n  clearTimeout(refreshTokenTimeout);\n}\n\nfunction verifyEmail(token) {\n  return CRUDService.post(\"\".concat(api, \"/verify-email\"), {\n    token: token\n  });\n}\n\nfunction forgotPassword(email) {\n  return CRUDService.post(\"\".concat(api, \"/forgot-password\"), {\n    email: email\n  });\n}\n\nfunction validateResetToken(token) {\n  return CRUDService.post(\"\".concat(api, \"/validate-reset-token\"), {\n    token: token\n  });\n}\n\nfunction resetPassword(_ref) {\n  var token = _ref.token,\n      password = _ref.password,\n      confirmPassword = _ref.confirmPassword;\n  return CRUDService.post(\"\".concat(api, \"/reset-password\"), {\n    token: token,\n    password: password,\n    confirmPassword: confirmPassword\n  });\n}\n\nfunction update(id, params) {\n  return CRUDService.put(\"\".concat(api, \"/\").concat(id), params).then(function (user) {\n    if (user.id === userSubject.value.id) {\n      user = _objectSpread(_objectSpread({}, userSubject.value), user);\n      userSubject.next(user);\n    }\n\n    return user;\n  });\n}\n\nfunction saveProfile(_x4) {\n  return _saveProfile.apply(this, arguments);\n}\n\nfunction _saveProfile() {\n  _saveProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(model) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", CRUDService.post(\"\".concat(api, \"/save-profile\"), model));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _saveProfile.apply(this, arguments);\n}\n\nfunction getProfile(_x5) {\n  return _getProfile.apply(this, arguments);\n} // function getAll() {\n//     return CRUDService.get(api);\n// }\n// function getById(id) {\n//     return CRUDService.get(`${api}/${id}`);\n// }\n// function create(params) {\n//     return CRUDService.post(api, params);\n// }\n\n\nfunction _getProfile() {\n  _getProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", CRUDService.get(\"\".concat(api, \"/\").concat(id, \"/profile\")));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getProfile.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/account.service.tsx"],"names":["BehaviorSubject","CRUDService","userSubject","getConfig","publicRuntimeConfig","API_URL","api","accountService","logout","login","refreshToken","verifyEmail","forgotPassword","validateResetToken","resetPassword","getProfile","update","saveProfile","user","asObservable","userValue","value","email","password","post","then","next","data","startRefreshTokenTimer","router","stopRefreshTokenTimer","push","refreshTokenTimeout","jwtToken","JSON","parse","atob","split","expires","Date","exp","timeout","getTime","now","setTimeout","clearTimeout","token","confirmPassword","id","params","put","model","get"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { CRUDService } from './CRUD.service';\nconst userSubject = new BehaviorSubject(null);\nimport getConfig from 'next/config'\nimport { NextRouter } from 'next/router';\nimport { IProfile } from 'src/_models/profile.model';\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\nconst api = `${API_URL}/accounts`\n\nexport const accountService = {\n    logout,\n    login,\n    refreshToken,\n    verifyEmail,\n    forgotPassword,\n    validateResetToken,\n    resetPassword,\n    getProfile,\n    // getAll,\n    // getById,\n    // create,\n    update,\n    saveProfile,\n    // delete: _delete,\n    get api() { return `${API_URL}/accounts` },\n    user: userSubject.asObservable(),\n    get userValue() { return userSubject.value }\n}\n\nasync function login(email, password) {\n    return CRUDService.post(`${api}/authenticate`, { email, password })\n        .then(user => {\n            userSubject.next(user.data);\n            startRefreshTokenTimer();\n            return user;\n        });\n}\n\nasync function logout(router: NextRouter) {\n    await CRUDService.post(`${api}/revoke-token`, {});\n    stopRefreshTokenTimer();\n    userSubject.next(null);\n    router.push('/account/login');\n}\n\nasync function refreshToken() {\n    return CRUDService.post(`${api}/refresh-token`, {})\n        .then(user => {\n            userSubject.next(user.data);\n            startRefreshTokenTimer();\n            return user;\n        });\n}\n\nlet refreshTokenTimeout;\n\nfunction startRefreshTokenTimer() {\n    const jwtToken = JSON.parse(atob(userSubject.value.jwtToken.split('.')[1]));\n    const expires = new Date(jwtToken.exp * 1000);\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    refreshTokenTimeout = setTimeout(refreshToken, timeout);\n}\n\nfunction stopRefreshTokenTimer() {\n    clearTimeout(refreshTokenTimeout);\n}\n\nfunction verifyEmail(token: string) {\n    return CRUDService.post(`${api}/verify-email`, { token });\n}\n\nfunction forgotPassword(email: string) {\n    return CRUDService.post(`${api}/forgot-password`, { email });\n}\n\nfunction validateResetToken(token) {\n    return CRUDService.post(`${api}/validate-reset-token`, { token });\n}\n\nfunction resetPassword({ token, password, confirmPassword }) {\n    return CRUDService.post(`${api}/reset-password`, { token, password, confirmPassword });\n}\n\nfunction update(id, params) {\n    return CRUDService.put(`${api}/${id}`, params)\n        .then(user => {\n            if (user.id === userSubject.value.id) {\n                user = { ...userSubject.value, ...user };\n                userSubject.next(user);\n            }\n            return user;\n        });\n}\n\nasync function saveProfile(model: IProfile) {\n    return CRUDService.post(`${api}/save-profile`, model)\n}\n\nasync function getProfile(id: string) {\n    return CRUDService.get(`${api}/${id}/profile`);\n}\n\n// function getAll() {\n//     return CRUDService.get(api);\n// }\n\n// function getById(id) {\n//     return CRUDService.get(`${api}/${id}`);\n// }\n\n// function create(params) {\n//     return CRUDService.post(api, params);\n// }\n"]},"metadata":{},"sourceType":"module"}