{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjmak\\\\projects\\\\simfy_interview\\\\src\\\\pages\\\\_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useEffect, useReducer, useState } from \"react\";\nimport { ThemeProvider } from \"theme-ui\";\nimport theme from \"../../theme\";\nimport Nav from \"../components/nav.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'antd/dist/antd.css';\nimport \"../../style.scss\";\nimport \"../components/customElements/tabHead.scss\";\nimport { SWRConfig } from \"swr\";\nimport { CRUDService } from '../_services/CRUD.service';\nimport { Layout } from 'antd';\nimport { accountService } from \"src/_services/index.service\";\nimport { useEffectOnce } from \"react-use\";\nimport { ProfileProvider, ProfileReducer, initialProfileState } from \"src/_contexts/profile.context\";\nimport { UPDATE } from \"src/_types/types\";\nconst {\n  Content\n} = Layout;\nexport default function App({\n  Component,\n  pageProps\n}) {\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    0: ProfileState,\n    1: dispatchProfile\n  } = useReducer(ProfileReducer, initialProfileState);\n  useEffectOnce(() => {\n    accountService.refreshToken().then(x => {\n      setCurrentUser(x.data);\n    }).catch(err => {}).finally(() => {\n      setLoading(false);\n    });\n  });\n  useEffect(() => {\n    currentUser && onLoadUserData();\n  }, [currentUser]);\n  const onLoadUserData = useCallback(async () => {\n    if (currentUser) {\n      const res = await accountService.getProfile(currentUser.id);\n      dispatchProfile({\n        type: UPDATE,\n        payload: res.data\n      });\n    }\n  }, [currentUser]);\n  return __jsx(ProfileProvider, {\n    value: {\n      ProfileState,\n      dispatchProfile\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(SWRConfig, {\n    value: {\n      fetcher: CRUDService.get\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, !loading ? __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }\n  }, __jsx(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  }), __jsx(Content, {\n    className: \"site-layout col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 33\n    }\n  }, __jsx(\"div\", {\n    className: \"site-layout-background col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 37\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 41\n    }\n  }))))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, \"Loading...\"))));\n}","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/pages/_app.tsx"],"names":["React","useCallback","useEffect","useReducer","useState","ThemeProvider","theme","Nav","SWRConfig","CRUDService","Layout","accountService","useEffectOnce","ProfileProvider","ProfileReducer","initialProfileState","UPDATE","Content","App","Component","pageProps","currentUser","setCurrentUser","loading","setLoading","ProfileState","dispatchProfile","refreshToken","then","x","data","catch","err","finally","onLoadUserData","res","getProfile","id","type","payload","fetcher","get"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useReducer, useState } from \"react\";\nimport { ThemeProvider } from \"theme-ui\";\nimport theme from \"../../theme\";\nimport Nav from \"../components/nav.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'antd/dist/antd.css';\nimport \"../../style.scss\";\nimport \"../components/customElements/tabHead.scss\";\nimport useSWR, { SWRConfig } from \"swr\";\nimport { CRUDService } from '../_services/CRUD.service';\nimport { Layout } from 'antd';\nimport { accountService } from \"src/_services/index.service\";\nimport { useEffectOnce } from \"react-use\";\nimport { ProfileProvider, ProfileReducer, initialProfileState } from \"src/_contexts/profile.context\";\nimport { UPDATE } from \"src/_types/types\";\n\nconst { Content } = Layout;\n\nexport default function App({ Component, pageProps }) {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    let [ProfileState, dispatchProfile] = useReducer(ProfileReducer, initialProfileState);\n\n    useEffectOnce(() => {\n        accountService.refreshToken()\n            .then(x => {\n                setCurrentUser(x.data);\n            }).catch(err => {\n            }).finally(() => {\n                setLoading(false);\n            });\n    });\n\n    useEffect(() => {\n        currentUser && onLoadUserData();\n    }, [currentUser]);\n\n\n    const onLoadUserData = useCallback(async () => {\n        if (currentUser) {\n            const res = await accountService.getProfile(currentUser.id);\n            dispatchProfile({ type: UPDATE, payload: res.data });\n        }\n    }, [currentUser]);\n\n    return (\n        <ProfileProvider value={{ ProfileState, dispatchProfile }}>\n            <ThemeProvider theme={theme}>\n                <SWRConfig value={{ fetcher: CRUDService.get }}>\n                    {\n                        !loading ?\n                            <Layout>\n                                <Nav />\n                                <Content className=\"site-layout col-12\">\n                                    <div className=\"site-layout-background col-12\">\n                                        <Component {...pageProps} />\n                                    </div>\n                                </Content>\n                            </Layout> :\n                            <div>Loading...</div>\n                    }\n                </SWRConfig>\n            </ThemeProvider>\n        </ProfileProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}