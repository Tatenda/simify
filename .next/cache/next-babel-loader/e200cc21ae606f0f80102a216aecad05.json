{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  API_URL\n} = publicRuntimeConfig;\n\nconst authHeader = () => {\n  return {};\n};\n\nconst post_no_preflight = async (api, body) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: _objectSpread({\n      \"Content-Type\": \"text/plain\"\n    }, authHeader()),\n    credentials: \"include\",\n    mode: \"no-cors\",\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse).catch(err => err);\n};\n\nconst get = async api => {\n  const requestOptions = {\n    method: \"GET\"\n  };\n  console.log(api);\n  return fetch(api, requestOptions);\n};\n\nconst post = async (api, body) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: _objectSpread({\n      \"Content-Type\": \"application/json\"\n    }, authHeader()),\n    credentials: \"include\",\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n};\n\nfunction put(api, body) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: _objectSpread({\n      \"Content-Type\": \"application/json\"\n    }, authHeader()),\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  console.log(\"response\", response);\n  return response.text().then(text => {\n    console.log(text);\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    const data = text && JSON.parse(text);\n    console.log(data);\n\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport const CRUDService = {\n  get,\n  put,\n  post,\n  API_URL\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["getConfig","publicRuntimeConfig","API_URL","authHeader","post_no_preflight","api","body","requestOptions","method","headers","credentials","mode","JSON","stringify","fetch","then","handleResponse","catch","err","get","console","log","post","put","response","text","startsWith","Promise","reject","code","status","data","parse","ok","error","message","statusText","CRUDService"],"mappings":"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","sourcesContent":["import getConfig from \"next/config\";\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst authHeader = () => {\n    return {};\n};\n\nconst post_no_preflight = async (api, body) => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"text/plain\", ...authHeader() },\n        credentials: \"include\",\n        mode: \"no-cors\",\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions as RequestInit)\n        .then(handleResponse)\n        .catch((err) => err);\n};\n\nconst get = async (api: string) => {\n    const requestOptions = {\n        method: \"GET\",\n    };\n    console.log(api);\n    return fetch(api, requestOptions as RequestInit);\n};\n\nconst post = async (api, body) => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        credentials: \"include\",\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions as RequestInit).then(handleResponse);\n};\n\nfunction put(api, body) {\n    const requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response: Response) {\n    console.log(\"response\", response);\n\n    return response.text().then((text) => {\n        console.log(text);\n\n        if (text.startsWith(\"<!DOCTYPE html>\"))\n            return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        console.log(data);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\nexport const CRUDService = {\n    get,\n    put,\n    post,\n    API_URL,\n};\n"]},"metadata":{},"sourceType":"module"}