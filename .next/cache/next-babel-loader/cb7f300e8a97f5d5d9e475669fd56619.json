{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getConfig from \"next/config\";\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar API_URL = publicRuntimeConfig.API_URL;\n\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(api) {\n    var requestOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestOptions = {\n              method: \"GET\"\n            };\n            return _context.abrupt(\"return\", fetch(api, requestOptions).then(handleResponse));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction handleResponse(response) {\n  console.log(\"response\", response);\n  return response.json().then(function (text) {\n    console.log(text);\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    var data = text && JSON.parse(text);\n    console.log(data);\n\n    if (!response.ok) {\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport var CRUDService = {\n  get: get,\n  post: post,\n  API_URL: API_URL\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["getConfig","publicRuntimeConfig","API_URL","get","api","requestOptions","method","fetch","then","handleResponse","response","console","log","json","text","startsWith","Promise","reject","code","status","data","JSON","parse","ok","error","message","statusText","CRUDService","post"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;iBACgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;IACAC,O,GAAYD,mB,CAAZC,O;;AAER,IAAMC,GAAG;AAAA,sEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACFC,YAAAA,cADE,GACe;AACnBC,cAAAA,MAAM,EAAE;AADW,aADf;AAAA,6CAIDC,KAAK,CAACH,GAAD,EAAMC,cAAN,CAAL,CAA0CG,IAA1C,CAA+CC,cAA/C,CAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAHN,GAAG;AAAA;AAAA;AAAA,GAAT;;AAOA,SAASM,cAAT,CAAwBC,QAAxB,EAA4C;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AAEA,SAAOA,QAAQ,CAACG,IAAT,GAAgBL,IAAhB,CAAqB,UAACM,IAAD,EAAU;AAClCH,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AAEA,QAAIA,IAAI,CAACC,UAAL,CAAgB,iBAAhB,CAAJ,EACI,OAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,IAAI,EAAER,QAAQ,CAACS;AAAjB,KAAf,CAAP;AACJ,QAAMC,IAAI,GAAGN,IAAI,IAAIO,IAAI,CAACC,KAAL,CAAWR,IAAX,CAArB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;;AACA,QAAI,CAACV,QAAQ,CAACa,EAAd,EAAkB;AACd,UAAMC,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0Bf,QAAQ,CAACgB,UAAjD;AACA,aAAOV,OAAO,CAACC,MAAR,CAAeO,KAAf,CAAP;AACH;;AACD,WAAOJ,IAAP;AACH,GAZM,CAAP;AAaH;;AAED,OAAO,IAAMO,WAAW,GAAG;AACvBxB,EAAAA,GAAG,EAAHA,GADuB;AAEvByB,EAAAA,IAAI,EAAJA,IAFuB;AAGvB1B,EAAAA,OAAO,EAAPA;AAHuB,CAApB","sourcesContent":["import getConfig from \"next/config\";\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst get = async (api: string) => {\n    const requestOptions = {\n        method: \"GET\",\n    };\n    return fetch(api, requestOptions as RequestInit).then(handleResponse);\n};\n\nfunction handleResponse(response: Response) {\n    console.log(\"response\", response);\n\n    return response.json().then((text) => {\n        console.log(text);\n\n        if (text.startsWith(\"<!DOCTYPE html>\"))\n            return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        console.log(data);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\nexport const CRUDService = {\n    get,\n    post,\n    API_URL,\n};\n"]},"metadata":{},"sourceType":"module"}