{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport getConfig from \"next/config\";\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar API_URL = publicRuntimeConfig.API_URL;\n\nvar authHeader = function authHeader() {\n  return {\n    Authorization: \"Bearer \"\n  };\n};\n\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(api) {\n    var requestOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestOptions = {\n              method: \"GET\",\n              headers: authHeader()\n            };\n            return _context.abrupt(\"return\", fetch(api, requestOptions).then(handleResponse));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar post = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(api, body) {\n    var requestOptions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            requestOptions = {\n              method: \"POST\",\n              headers: _objectSpread({\n                \"Content-Type\": \"application/json\"\n              }, authHeader()),\n              credentials: \"include\",\n              body: JSON.stringify(body)\n            };\n            return _context2.abrupt(\"return\", fetch(\"\".concat(api), requestOptions).then(handleResponse));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function post(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction put(api, body) {\n  var requestOptions = {\n    method: \"PUT\",\n    headers: _objectSpread({\n      \"Content-Type\": \"application/json\"\n    }, authHeader()),\n    body: JSON.stringify(body)\n  };\n  return fetch(\"\".concat(api), requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport var CRUDService = {\n  get: get,\n  put: put,\n  post: post,\n  API_URL: API_URL\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["getConfig","publicRuntimeConfig","API_URL","authHeader","Authorization","get","api","requestOptions","method","headers","fetch","then","handleResponse","post","body","credentials","JSON","stringify","put","response","text","startsWith","Promise","reject","code","status","data","parse","ok","error","message","statusText","CRUDService"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;iBAEgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;IACAC,O,GAAYD,mB,CAAZC,O;;AAER,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,SAAO;AAAEC,IAAAA,aAAa;AAAf,GAAP;AACH,CAFD;;AAIA,IAAMC,GAAG;AAAA,sEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACFC,YAAAA,cADE,GACe;AACnBC,cAAAA,MAAM,EAAE,KADW;AAEnBC,cAAAA,OAAO,EAAEN,UAAU;AAFA,aADf;AAAA,6CAKDO,KAAK,CAACJ,GAAD,EAAMC,cAAN,CAAL,CAA2BI,IAA3B,CAAgCC,cAAhC,CALC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAHP,GAAG;AAAA;AAAA;AAAA,GAAT;;AAOA,IAAMQ,IAAI;AAAA,uEAAG,kBAAOP,GAAP,EAAYQ,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACHP,YAAAA,cADG,GACc;AACnBC,cAAAA,MAAM,EAAE,MADW;AAEnBC,cAAAA,OAAO;AAAI,gCAAgB;AAApB,iBAA2CN,UAAU,EAArD,CAFY;AAGnBY,cAAAA,WAAW,EAAE,SAHM;AAInBD,cAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAJa,aADd;AAAA,8CAOFJ,KAAK,WAAIJ,GAAJ,GAAWC,cAAX,CAAL,CAA+CI,IAA/C,CAAoDC,cAApD,CAPE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJC,IAAI;AAAA;AAAA;AAAA,GAAV;;AAUA,SAASK,GAAT,CAAaZ,GAAb,EAAkBQ,IAAlB,EAAwB;AACpB,MAAMP,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO;AAAI,sBAAgB;AAApB,OAA2CN,UAAU,EAArD,CAFY;AAGnBW,IAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAHa,GAAvB;AAKA,SAAOJ,KAAK,WAAIJ,GAAJ,GAAWC,cAAX,CAAL,CAAgCI,IAAhC,CAAqCC,cAArC,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBO,QAAxB,EAA4C;AACxC,SAAOA,QAAQ,CAACC,IAAT,GAAgBT,IAAhB,CAAqB,UAACS,IAAD,EAAU;AAClC,QAAIA,IAAI,CAACC,UAAL,CAAgB,iBAAhB,CAAJ,EACI,OAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,IAAI,EAAEL,QAAQ,CAACM;AAAjB,KAAf,CAAP;AACJ,QAAMC,IAAI,GAAGN,IAAI,IAAIJ,IAAI,CAACW,KAAL,CAAWP,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACS,EAAd,EAAkB;AACd,UAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,aAAOT,OAAO,CAACC,MAAR,CAAeM,KAAf,CAAP;AACH;;AACD,WAAOH,IAAP;AACH,GATM,CAAP;AAUH;;AAED,OAAO,IAAMM,WAAW,GAAG;AACvB3B,EAAAA,GAAG,EAAHA,GADuB;AAEvBa,EAAAA,GAAG,EAAHA,GAFuB;AAGvBL,EAAAA,IAAI,EAAJA,IAHuB;AAIvBX,EAAAA,OAAO,EAAPA;AAJuB,CAApB","sourcesContent":["import getConfig from \"next/config\";\n\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst authHeader = () => {\n    return { Authorization: `Bearer ` };\n};\n\nconst get = async (api: string) => {\n    const requestOptions = {\n        method: \"GET\",\n        headers: authHeader(),\n    };\n    return fetch(api, requestOptions).then(handleResponse);\n};\nconst post = async (api, body) => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        credentials: \"include\",\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions as RequestInit).then(handleResponse);\n};\n\nfunction put(api, body) {\n    const requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response: Response) {\n    return response.text().then((text) => {\n        if (text.startsWith(\"<!DOCTYPE html>\"))\n            return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\nexport const CRUDService = {\n    get,\n    put,\n    post,\n    API_URL,\n};\n"]},"metadata":{},"sourceType":"module"}