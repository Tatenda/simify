{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BehaviorSubject } from 'rxjs';\nimport { CRUDService } from './CRUD.service';\nconst userSubject = new BehaviorSubject(null);\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  API_URL\n} = publicRuntimeConfig;\nconst api = `${API_URL}/accounts`;\nexport const accountService = {\n  logout,\n  login,\n  refreshToken,\n  verifyEmail,\n  forgotPassword,\n  validateResetToken,\n  resetPassword,\n  getProfile,\n  // getAll,\n  // getById,\n  // create,\n  update,\n  saveProfile,\n\n  // delete: _delete,\n  get api() {\n    return `${API_URL}/accounts`;\n  },\n\n  user: userSubject.asObservable(),\n\n  get userValue() {\n    return userSubject.value;\n  }\n\n};\n\nasync function login(email, password) {\n  return CRUDService.post(`${api}/authenticate`, {\n    email,\n    password\n  }).then(user => {\n    userSubject.next(user.data);\n    startRefreshTokenTimer();\n    return user;\n  });\n}\n\nasync function logout(router) {\n  await CRUDService.post(`${api}/revoke-token`, {});\n  stopRefreshTokenTimer();\n  userSubject.next(null);\n  router.push('/account/login');\n}\n\nasync function refreshToken() {\n  return CRUDService.post(`${api}/refresh-token`, {}).then(user => {\n    userSubject.next(user.data);\n    startRefreshTokenTimer();\n    return user;\n  });\n}\n\nlet refreshTokenTimeout;\n\nfunction startRefreshTokenTimer() {\n  const jwtToken = JSON.parse(atob(userSubject.value.jwtToken.split('.')[1]));\n  const expires = new Date(jwtToken.exp * 1000);\n  const timeout = expires.getTime() - Date.now() - 60 * 1000;\n  refreshTokenTimeout = setTimeout(refreshToken, timeout);\n}\n\nfunction stopRefreshTokenTimer() {\n  clearTimeout(refreshTokenTimeout);\n}\n\nfunction verifyEmail(token) {\n  return CRUDService.post(`${api}/verify-email`, {\n    token\n  });\n}\n\nfunction forgotPassword(email) {\n  return CRUDService.post(`${api}/forgot-password`, {\n    email\n  });\n}\n\nfunction validateResetToken(token) {\n  return CRUDService.post(`${api}/validate-reset-token`, {\n    token\n  });\n}\n\nfunction resetPassword({\n  token,\n  password,\n  confirmPassword\n}) {\n  return CRUDService.post(`${api}/reset-password`, {\n    token,\n    password,\n    confirmPassword\n  });\n}\n\nfunction update(id, params) {\n  return CRUDService.put(`${api}/${id}`, params).then(user => {\n    if (user.id === userSubject.value.id) {\n      user = _objectSpread(_objectSpread({}, userSubject.value), user);\n      userSubject.next(user);\n    }\n\n    return user;\n  });\n}\n\nasync function saveProfile(model) {\n  return CRUDService.post(`${api}/save-profile`, model);\n}\n\nasync function getProfile(id) {\n  return CRUDService.get(`${api}/${id}/profile`);\n} // function getAll() {\n//     return CRUDService.get(api);\n// }\n// function getById(id) {\n//     return CRUDService.get(`${api}/${id}`);\n// }\n// function create(params) {\n//     return CRUDService.post(api, params);\n// }","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/account.service.tsx"],"names":["BehaviorSubject","CRUDService","userSubject","getConfig","publicRuntimeConfig","API_URL","api","accountService","logout","login","refreshToken","verifyEmail","forgotPassword","validateResetToken","resetPassword","getProfile","update","saveProfile","user","asObservable","userValue","value","email","password","post","then","next","data","startRefreshTokenTimer","router","stopRefreshTokenTimer","push","refreshTokenTimeout","jwtToken","JSON","parse","atob","split","expires","Date","exp","timeout","getTime","now","setTimeout","clearTimeout","token","confirmPassword","id","params","put","model","get"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { CRUDService } from './CRUD.service';\nconst userSubject = new BehaviorSubject(null);\nimport getConfig from 'next/config'\nimport { NextRouter } from 'next/router';\nimport { IProfile } from 'src/_models/profile.model';\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\nconst api = `${API_URL}/accounts`\n\nexport const accountService = {\n    logout,\n    login,\n    refreshToken,\n    verifyEmail,\n    forgotPassword,\n    validateResetToken,\n    resetPassword,\n    getProfile,\n    // getAll,\n    // getById,\n    // create,\n    update,\n    saveProfile,\n    // delete: _delete,\n    get api() { return `${API_URL}/accounts` },\n    user: userSubject.asObservable(),\n    get userValue() { return userSubject.value }\n}\n\nasync function login(email, password) {\n    return CRUDService.post(`${api}/authenticate`, { email, password })\n        .then(user => {\n            userSubject.next(user.data);\n            startRefreshTokenTimer();\n            return user;\n        });\n}\n\nasync function logout(router: NextRouter) {\n    await CRUDService.post(`${api}/revoke-token`, {});\n    stopRefreshTokenTimer();\n    userSubject.next(null);\n    router.push('/account/login');\n}\n\nasync function refreshToken() {\n    return CRUDService.post(`${api}/refresh-token`, {})\n        .then(user => {\n            userSubject.next(user.data);\n            startRefreshTokenTimer();\n            return user;\n        });\n}\n\nlet refreshTokenTimeout;\n\nfunction startRefreshTokenTimer() {\n    const jwtToken = JSON.parse(atob(userSubject.value.jwtToken.split('.')[1]));\n    const expires = new Date(jwtToken.exp * 1000);\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    refreshTokenTimeout = setTimeout(refreshToken, timeout);\n}\n\nfunction stopRefreshTokenTimer() {\n    clearTimeout(refreshTokenTimeout);\n}\n\nfunction verifyEmail(token: string) {\n    return CRUDService.post(`${api}/verify-email`, { token });\n}\n\nfunction forgotPassword(email: string) {\n    return CRUDService.post(`${api}/forgot-password`, { email });\n}\n\nfunction validateResetToken(token) {\n    return CRUDService.post(`${api}/validate-reset-token`, { token });\n}\n\nfunction resetPassword({ token, password, confirmPassword }) {\n    return CRUDService.post(`${api}/reset-password`, { token, password, confirmPassword });\n}\n\nfunction update(id, params) {\n    return CRUDService.put(`${api}/${id}`, params)\n        .then(user => {\n            if (user.id === userSubject.value.id) {\n                user = { ...userSubject.value, ...user };\n                userSubject.next(user);\n            }\n            return user;\n        });\n}\n\nasync function saveProfile(model: IProfile) {\n    return CRUDService.post(`${api}/save-profile`, model)\n}\n\nasync function getProfile(id: string) {\n    return CRUDService.get(`${api}/${id}/profile`);\n}\n\n// function getAll() {\n//     return CRUDService.get(api);\n// }\n\n// function getById(id) {\n//     return CRUDService.get(`${api}/${id}`);\n// }\n\n// function create(params) {\n//     return CRUDService.post(api, params);\n// }\n"]},"metadata":{},"sourceType":"module"}