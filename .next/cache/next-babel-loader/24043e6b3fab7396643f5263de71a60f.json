{"ast":null,"code":"import getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  API_URL\n} = publicRuntimeConfig;\n\nconst get = async api => {\n  const requestOptions = {\n    method: \"GET\"\n  };\n  return fetch(api, requestOptions).then(handleResponse);\n};\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport const CRUDService = {\n  get\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["getConfig","publicRuntimeConfig","API_URL","get","api","requestOptions","method","fetch","then","handleResponse","response","text","startsWith","Promise","reject","code","status","data","JSON","parse","ok","error","message","statusText","CRUDService"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcD,mBAApB;;AAEA,MAAME,GAAG,GAAG,MAAOC,GAAP,IAAuB;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE;AADW,GAAvB;AAGA,SAAOC,KAAK,CAACH,GAAD,EAAMC,cAAN,CAAL,CAA0CG,IAA1C,CAA+CC,cAA/C,CAAP;AACH,CALD;;AAOA,SAASA,cAAT,CAAwBC,QAAxB,EAA4C;AACxC,SAAOA,QAAQ,CAACC,IAAT,GAAgBH,IAAhB,CAAsBG,IAAD,IAAU;AAClC,QAAIA,IAAI,CAACC,UAAL,CAAgB,iBAAhB,CAAJ,EACI,OAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,IAAI,EAAEL,QAAQ,CAACM;AAAjB,KAAf,CAAP;AACJ,UAAMC,IAAI,GAAGN,IAAI,IAAIO,IAAI,CAACC,KAAL,CAAWR,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACU,EAAd,EAAkB;AACd,YAAMC,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BZ,QAAQ,CAACa,UAAjD;AACA,aAAOV,OAAO,CAACC,MAAR,CAAeO,KAAf,CAAP;AACH;;AACD,WAAOJ,IAAP;AACH,GATM,CAAP;AAUH;;AAED,OAAO,MAAMO,WAAW,GAAG;AACvBrB,EAAAA;AADuB,CAApB","sourcesContent":["import getConfig from \"next/config\";\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst get = async (api: string) => {\n    const requestOptions = {\n        method: \"GET\",\n    };\n    return fetch(api, requestOptions as RequestInit).then(handleResponse);\n};\n\nfunction handleResponse(response: Response) {\n    return response.text().then((text) => {\n        if (text.startsWith(\"<!DOCTYPE html>\"))\n            return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\nexport const CRUDService = {\n    get,\n};\n"]},"metadata":{},"sourceType":"module"}