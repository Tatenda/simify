{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { accountService } from './index.service';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  API_URL\n} = publicRuntimeConfig;\n\nconst authHeader = url => {\n  if (url) {\n    const user = accountService.userValue;\n    const isLoggedIn = user && user.jwtToken;\n    const isApiUrl = url.startsWith(API_URL);\n\n    if (isLoggedIn && isApiUrl) {\n      return {\n        Authorization: `Bearer ${user.jwtToken}`\n      };\n    } else {\n      return {};\n    }\n  }\n};\n\nconst get = async api => {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader(api)\n  };\n  return fetch(api, requestOptions).then(handleResponse);\n};\n\nconst post = async (api, body) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: _objectSpread({\n      'Content-Type': 'application/json'\n    }, authHeader(api)),\n    credentials: 'include',\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n};\n\nfunction put(api, body) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: _objectSpread({\n      'Content-Type': 'application/json'\n    }, authHeader(api)),\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].includes(response.status) && accountService.userValue) {\n        accountService.logout();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n} // function _delete(api: string, id: string): Observable<api_result> {\n//     const requestOptions = {\n//         method: 'DELETE',\n//         headers: authHeader()\n//     };\n//     return from(fetch(`${api}/${id}`, requestOptions as RequestInit).then(handleResponse));\n// }\n// function search(api: string, model: any): Observable<api_result> {\n//     const requestOptions = { method: 'GET', headers: authHeader() } as RequestInit;\n//     let filterStr = (model && model.status) ? `status=${model.status}` : 'status=all';\n//     model && Object.keys(model).forEach(key => {\n//         key !== 'status' && (filterStr += ((key === 'dateObj') && model.dateObj) ?\n//             `&DateFrom=${model.dateObj.from}&DateTo=${model.dateObj.to}` :\n//             model[key] ? `&${key}=${model[key]}` : '');\n//     });\n//     return from(fetch(`${api}/search?${filterStr}`, requestOptions).then(handleResponse));\n// }\n\n\nexport const CRUDService = {\n  get,\n  put,\n  // search,\n  post,\n  API_URL // _delete\n\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["accountService","getConfig","publicRuntimeConfig","API_URL","authHeader","url","user","userValue","isLoggedIn","jwtToken","isApiUrl","startsWith","Authorization","get","api","requestOptions","method","headers","fetch","then","handleResponse","post","body","credentials","JSON","stringify","put","response","text","Promise","reject","code","status","data","parse","ok","includes","logout","error","message","statusText","CRUDService"],"mappings":"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","sourcesContent":["import { api_result } from '../_types/types';\nimport { accountService } from './index.service';\nimport getConfig from 'next/config';\n\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst authHeader = (url: string) => {\n    if (url) {\n        const user = accountService.userValue;\n        const isLoggedIn = user && user.jwtToken;\n        const isApiUrl = url.startsWith(API_URL);\n        if (isLoggedIn && isApiUrl) {\n            return { Authorization: `Bearer ${user.jwtToken}` };\n        } else {\n            return {};\n        }\n    }\n}\n\nconst get = async (api: string): Promise<api_result> => {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(api)\n    };\n    return fetch(api, requestOptions).then(handleResponse);\n}\n\nconst post = async (api, body): Promise<api_result> => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...authHeader(api) },\n        credentials: 'include',\n        body: JSON.stringify(body)\n    };\n    return fetch(`${api}`, requestOptions as RequestInit).then(handleResponse);\n}\n\nfunction put(api, body) {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json', ...authHeader(api) },\n        body: JSON.stringify(body)\n    };\n    return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response: Response) {\n    return response.text().then(text => {\n        if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if ([401, 403].includes(response.status) && accountService.userValue) {\n                accountService.logout();\n            }\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\n// function _delete(api: string, id: string): Observable<api_result> {\n//     const requestOptions = {\n//         method: 'DELETE',\n//         headers: authHeader()\n//     };\n//     return from(fetch(`${api}/${id}`, requestOptions as RequestInit).then(handleResponse));\n// }\n\n// function search(api: string, model: any): Observable<api_result> {\n//     const requestOptions = { method: 'GET', headers: authHeader() } as RequestInit;\n//     let filterStr = (model && model.status) ? `status=${model.status}` : 'status=all';\n//     model && Object.keys(model).forEach(key => {\n//         key !== 'status' && (filterStr += ((key === 'dateObj') && model.dateObj) ?\n//             `&DateFrom=${model.dateObj.from}&DateTo=${model.dateObj.to}` :\n//             model[key] ? `&${key}=${model[key]}` : '');\n//     });\n//     return from(fetch(`${api}/search?${filterStr}`, requestOptions).then(handleResponse));\n// }\n\nexport const CRUDService = {\n    get,\n    put,\n    // search,\n    post,\n    API_URL,\n    // _delete\n}\n"]},"metadata":{},"sourceType":"module"}