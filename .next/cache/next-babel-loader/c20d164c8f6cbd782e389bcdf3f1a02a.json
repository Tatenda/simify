{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext } from \"react\";\nimport { UPDATE } from \"src/_helpers/types\";\n\nconst ShowReducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE:\n      return _objectSpread({}, action.payload);\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nconst initialShowState = null;\nconst ShowContext = /*#__PURE__*/createContext({\n  ShowState: initialShowState,\n  dispatchShow: {}\n});\nconst ShowProvider = ShowContext.Provider;\nexport default ShowContext;\nexport { ShowProvider, ShowReducer, initialShowState };","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_contexts/show.context.tsx"],"names":["createContext","UPDATE","ShowReducer","state","action","type","payload","initialShowState","ShowContext","ShowState","dispatchShow","ShowProvider","Provider"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,MAAT,QAAuB,oBAAvB;;AAGA,MAAMC,WAAW,GAAG,CAChBC,KADgB,EAEhBC,MAFgB,KAGT;AACP,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,MAAL;AACI,+BAAYG,MAAM,CAACE,OAAnB;;AACJ;AACI;AAJR;;AAMA,SAAOH,KAAP;AACH,CAXD;;AAaA,MAAMI,gBAAsB,GAAI,IAAhC;AAEA,MAAMC,WAAW,gBAAGR,aAAa,CAAC;AAC9BS,EAAAA,SAAS,EAAEF,gBADmB;AAE9BG,EAAAA,YAAY,EAAE;AAFgB,CAAD,CAAjC;AAKA,MAAMC,YAAY,GAAGH,WAAW,CAACI,QAAjC;AACA,eAAeJ,WAAf;AACA,SAASG,YAAT,EAAuBT,WAAvB,EAAoCK,gBAApC","sourcesContent":["import { createContext } from \"react\";\r\nimport { UPDATE } from \"src/_helpers/types\";\r\nimport { Show } from \"src/_models/shows.model\";\r\n\r\nconst ShowReducer = (\r\n    state: Show,\r\n    action: { type: string; payload: any }\r\n): Show => {\r\n    switch (action.type) {\r\n        case UPDATE:\r\n            return { ...action.payload };\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst initialShowState: Show = (null as unknown) as Show;\r\n\r\nconst ShowContext = createContext({\r\n    ShowState: initialShowState,\r\n    dispatchShow: {} as any,\r\n});\r\n\r\nconst ShowProvider = ShowContext.Provider;\r\nexport default ShowContext;\r\nexport { ShowProvider, ShowReducer, initialShowState };\r\n"]},"metadata":{},"sourceType":"module"}