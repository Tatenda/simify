{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  API_URL\n} = publicRuntimeConfig;\n\nconst authHeader = () => {\n  return {\n    Authorization: `Bearer `\n  };\n};\n\nconst get = async api => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(api, requestOptions).then(handleResponse);\n};\n\nconst post = async (api, body) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: _objectSpread({\n      \"Content-Type\": \"application/json\"\n    }, authHeader()),\n    credentials: \"include\",\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n};\n\nfunction put(api, body) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: _objectSpread({\n      \"Content-Type\": \"application/json\"\n    }, authHeader()),\n    body: JSON.stringify(body)\n  };\n  return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    if (text.startsWith(\"<!DOCTYPE html>\")) return Promise.reject({\n      code: response.status\n    });\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport const CRUDService = {\n  get,\n  put,\n  post,\n  API_URL\n};","map":{"version":3,"sources":["C:/Users/tjmak/projects/simfy_interview/src/_services/CRUD.service.tsx"],"names":["getConfig","publicRuntimeConfig","API_URL","authHeader","Authorization","get","api","requestOptions","method","headers","fetch","then","handleResponse","post","body","credentials","JSON","stringify","put","response","text","startsWith","Promise","reject","code","status","data","parse","ok","error","message","statusText","CRUDService"],"mappings":";;;;;;AACA,OAAOA,SAAP,MAAsB,aAAtB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcD,mBAApB;;AAEA,MAAME,UAAU,GAAG,MAAM;AACrB,SAAO;AAAEC,IAAAA,aAAa,EAAG;AAAlB,GAAP;AACH,CAFD;;AAIA,MAAMC,GAAG,GAAG,MAAOC,GAAP,IAA4C;AACpD,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAEN,UAAU;AAFA,GAAvB;AAIA,SAAOO,KAAK,CAACJ,GAAD,EAAMC,cAAN,CAAL,CAA2BI,IAA3B,CAAgCC,cAAhC,CAAP;AACH,CAND;;AAQA,MAAMC,IAAI,GAAG,OAAOP,GAAP,EAAYQ,IAAZ,KAA0C;AACnD,QAAMP,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO;AAAI,sBAAgB;AAApB,OAA2CN,UAAU,EAArD,CAFY;AAGnBY,IAAAA,WAAW,EAAE,SAHM;AAInBD,IAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAJa,GAAvB;AAMA,SAAOJ,KAAK,CAAE,GAAEJ,GAAI,EAAR,EAAWC,cAAX,CAAL,CAA+CI,IAA/C,CAAoDC,cAApD,CAAP;AACH,CARD;;AAUA,SAASM,GAAT,CAAaZ,GAAb,EAAkBQ,IAAlB,EAAwB;AACpB,QAAMP,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO;AAAI,sBAAgB;AAApB,OAA2CN,UAAU,EAArD,CAFY;AAGnBW,IAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAHa,GAAvB;AAKA,SAAOJ,KAAK,CAAE,GAAEJ,GAAI,EAAR,EAAWC,cAAX,CAAL,CAAgCI,IAAhC,CAAqCC,cAArC,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBO,QAAxB,EAA4C;AACxC,SAAOA,QAAQ,CAACC,IAAT,GAAgBT,IAAhB,CAAsBS,IAAD,IAAU;AAClC,QAAIA,IAAI,CAACC,UAAL,CAAgB,iBAAhB,CAAJ,EACI,OAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,IAAI,EAAEL,QAAQ,CAACM;AAAjB,KAAf,CAAP;AACJ,UAAMC,IAAI,GAAGN,IAAI,IAAIJ,IAAI,CAACW,KAAL,CAAWP,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACS,EAAd,EAAkB;AACd,YAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,aAAOT,OAAO,CAACC,MAAR,CAAeM,KAAf,CAAP;AACH;;AACD,WAAOH,IAAP;AACH,GATM,CAAP;AAUH;;AAED,OAAO,MAAMM,WAAW,GAAG;AACvB3B,EAAAA,GADuB;AAEvBa,EAAAA,GAFuB;AAGvBL,EAAAA,IAHuB;AAIvBX,EAAAA;AAJuB,CAApB","sourcesContent":["import { api_result } from \"../_types/types\";\nimport getConfig from \"next/config\";\n\nconst { publicRuntimeConfig } = getConfig();\nconst { API_URL } = publicRuntimeConfig;\n\nconst authHeader = () => {\n    return { Authorization: `Bearer ` };\n};\n\nconst get = async (api: string): Promise<api_result> => {\n    const requestOptions = {\n        method: \"GET\",\n        headers: authHeader(),\n    };\n    return fetch(api, requestOptions).then(handleResponse);\n};\n\nconst post = async (api, body): Promise<api_result> => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        credentials: \"include\",\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions as RequestInit).then(handleResponse);\n};\n\nfunction put(api, body) {\n    const requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n        body: JSON.stringify(body),\n    };\n    return fetch(`${api}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response: Response) {\n    return response.text().then((text) => {\n        if (text.startsWith(\"<!DOCTYPE html>\"))\n            return Promise.reject({ code: response.status });\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n\nexport const CRUDService = {\n    get,\n    put,\n    post,\n    API_URL,\n};\n"]},"metadata":{},"sourceType":"module"}